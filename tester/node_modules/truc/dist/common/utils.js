'use strict';
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TruUtil = void 0;
const jwt = __importStar(require("jsonwebtoken"));
const crypto = __importStar(require("crypto"));
const uuid = __importStar(require("uuid"));
const base_64_1 = require("base-64");
const md5_1 = require("ts-md5/dist/md5");
class TruUtil {
}
exports.TruUtil = TruUtil;
TruUtil.md5 = md5_1.Md5;
TruUtil.log = (x, y) => {
    if (process.env.CONSOLE_LOG == 'true') {
        if (x != undefined && y == undefined)
            console.log(x);
        else if (x != undefined && y != undefined)
            console.log(x, y);
        else
            console.log('No parameters received.');
    }
};
TruUtil.md5HashStr = (data) => {
    if (!data)
        return data;
    else
        return TruUtil.md5.hashStr(data);
};
TruUtil.extension = (x) => {
    if (!x)
        return '';
    const arr = x.trim().split('.');
    return arr.length === 1 ? '' : arr[arr.length - 1];
};
TruUtil.getRandomNumberBetween = (min, max) => {
    return Math.floor(Math.random() * (max - min + 1) + min);
};
TruUtil.decode = (x) => {
    return (0, base_64_1.decode)(x);
};
TruUtil.encode = (x) => {
    return (0, base_64_1.encode)(x);
};
TruUtil.error = (x, y) => {
    if (process.env.CONSOLE_ERROR == 'true') {
        if (x != undefined && y == undefined)
            console.error(x);
        else if (x != undefined && y != undefined)
            console.error(x, y);
        else
            console.error('No parameters received.');
    }
};
TruUtil.validEmail = (emails) => {
    if (emails == undefined ||
        emails == null ||
        (Array.isArray(emails) && emails.length == 0))
        return false;
    const emailRegexp = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
    let flag = true;
    if (!Array.isArray(emails))
        emails = [emails];
    for (const x of emails) {
        if (!emailRegexp.test(x)) {
            return (flag = false);
        }
    }
    return flag;
};
TruUtil.hasData = (data) => {
    return !TruUtil.blank(data);
};
TruUtil.blank = (data) => {
    return data == undefined || data == null || data.trim() === '';
};
TruUtil.hasDataForAll = (...data) => {
    for (const x of data) {
        if (TruUtil.blank(x))
            return false;
    }
    return true;
};
TruUtil.dataBlankForAll = (...data) => {
    for (const x of data) {
        if (TruUtil.hasData(x))
            return false;
    }
    return true;
};
TruUtil.dataBlankForAny = (...data) => {
    for (const x of data) {
        if (TruUtil.blank(x))
            return true;
    }
    return false;
};
TruUtil.hasDataForAny = (...data) => {
    for (const x of data) {
        if (TruUtil.hasData(x))
            return true;
    }
    return false;
};
TruUtil.generateRandomString = () => {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    return require('randomstring').generate({
        length: 6,
        charset: 'alphanumeric',
    });
};
TruUtil.getJwt = (data) => {
    return jwt.sign({
        data: data,
    }, process.env.JWT_SECRET, { expiresIn: '30 days' });
};
TruUtil.letifyJwt = (token, secret) => {
    if (!secret)
        secret = process.env.JWT_SECRET;
    try {
        const _o = jwt.verify(token, secret);
        return { success: true, data: _o.data };
    }
    catch (err) {
        // log(err);
        return { success: false, message: 'Invalid token.' };
    }
};
TruUtil.getHash = (data, key) => {
    if (key == undefined)
        key = process.env.PWD_HASH_SALT;
    const hmac = crypto.createHmac('sha256', key);
    hmac.update(data);
    return hmac.digest('hex');
};
TruUtil.makeQueryPramVal = (val) => {
    if (val === null)
        return null;
    else
        return val.replace("'", "\\'");
};
TruUtil.generateSalt = () => {
    // Generate a v1 (time-based) id
    return uuid.v1(); // -> '6c84fb90-12c4-11e1-840d-7b25c5ee775a'
    // Generate a v4 (random) id
    // return require('uuid').v4(); // -> '110ec58a-a0f2-4ac4-8393-c866d813b8d1'
};
TruUtil.uuidV1 = uuid.v1;
// static uuidV3 = uuid.v3;
TruUtil.uuidV4 = uuid.v4;
//# sourceMappingURL=utils.js.map