"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsersService = void 0;
const common_1 = require("@nestjs/common");
const uuid_1 = require("uuid");
const prisma_service_1 = require("../common/prisma.service");
const http_exception_1 = require("@nestjs/common/exceptions/http.exception");
const utils_1 = require("../common/utils");
let UsersService = class UsersService {
    constructor(prisma) {
        this.prisma = prisma;
    }
    async signIn(signInDto) {
        console.log(signInDto);
        const obj = {};
        const user = await this.prisma.user.findFirst({
            where: {
                email: signInDto['email'],
                password: utils_1.TruUtil.getHash(utils_1.TruUtil.decode(signInDto['password'])),
            },
        });
        if (user == null) {
            return obj;
        }
        const token = utils_1.TruUtil.getJwt({
            name: user.name,
            email: user.email,
            id: user.id,
            status: user.status,
        });
        // insert the token in user token table
        await this.prisma.userToken.create({
            data: {
                userId: user.id,
                token: token,
            },
        });
        obj.message = 'Sign In Successfull';
        obj.data = user;
        obj.token = token;
        return obj;
    }
    async createUser(signupDto) {
        const tmp = await this.prisma.user.findFirst({
            where: {
                email: signupDto['email'],
            },
        });
        if (null != tmp) {
            return { message: 'Email Already Exists. Please SignIn to continue.' };
        }
        const tmp1 = await this.prisma.account.findFirst({
            where: {
                name: signupDto['account'],
            },
        });
        if (null != tmp1) {
            return { message: 'User already exists with this account.' };
        }
        // create the user
        try {
            const user = await this.prisma.user.create({
                data: {
                    email: signupDto['email'],
                    password: utils_1.TruUtil.getHash(utils_1.TruUtil.decode(signupDto.password)),
                    name: signupDto['name'],
                    uniqueId: utils_1.TruUtil.generateRandomString(),
                    accounts: {
                        create: {
                            account: {
                                create: {
                                    name: signupDto['account'],
                                    appId: utils_1.TruUtil.generateRandomString(),
                                    identitySecret: (0, uuid_1.v4)(),
                                },
                            },
                        },
                    },
                },
            });
            const token = utils_1.TruUtil.getJwt({
                name: user.name,
                email: user.email,
                id: user.id,
                status: user.status,
            });
            //send email to confirm is pending TODO
            return { data: user, token };
        }
        catch (error) {
            console.log(error);
            throw new http_exception_1.HttpException('Server Error', common_1.HttpStatus.BAD_REQUEST);
        }
    }
    async verifyUser(confirmationToken) {
        const res = {};
        const user = await this.prisma.user.findFirst({
            where: {
                confirmationToken,
            },
        });
        if (user != null) {
            try {
                await this.prisma.user.update({
                    where: {
                        id: user.id,
                    },
                    data: {
                        status: 'ACTIVE',
                        confirmedAt: new Date(),
                    },
                });
                res.success = true;
                res.message = 'Account Verified Successfully';
                return res;
            }
            catch (error) {
                console.log(error);
                throw new http_exception_1.HttpException('Server Error', common_1.HttpStatus.BAD_REQUEST);
            }
        }
        else {
            res.success = false;
            res.message = 'Invalid Link';
            return res;
        }
    }
    async getPwdLink(PwdResetLinkDto) {
        const res = {};
        try {
            const user = await this.prisma.user.findFirst({
                where: {
                    email: PwdResetLinkDto['email'],
                },
            });
            if (!user) {
                res.success = false;
                res.message = 'Email Not Found';
                return res;
            }
            else {
                //TODO generate reset pwd link
                //TODO send reset pwd link to mail
                await this.prisma.user.update({
                    where: {
                        id: user.id,
                    },
                    data: {
                        resetPasswordToken: (0, uuid_1.v4)(),
                        resetPasswordSentAt: new Date(),
                    },
                });
                res.success = true;
                res.message = 'Link Created';
            }
            return res;
        }
        catch (error) {
            console.log(error);
            throw new http_exception_1.HttpException('Server Error', common_1.HttpStatus.BAD_REQUEST);
        }
    }
    async changePassword(ChangePasswordDto) {
        const res = {};
        try {
            if (ChangePasswordDto['password'] !== ChangePasswordDto['confirmPassword']) {
                res.success = true;
                res.message = 'Confirm password is not same as password';
                return res;
            }
            const user = await this.prisma.user.findFirst({
                where: {
                    resetPasswordToken: ChangePasswordDto['pwdResetToken'],
                },
            });
            if (!user) {
                res.success = false;
                res.message = 'Invalid Link';
                return res;
            }
            else {
                await this.prisma.user.update({
                    where: {
                        id: user.id,
                    },
                    data: {
                        password: utils_1.TruUtil.getHash(utils_1.TruUtil.decode(ChangePasswordDto['password'])),
                        resetPasswordSentAt: null,
                        resetPasswordToken: null,
                    },
                });
                res.success = true;
                res.message = 'Password Changed Successfully';
            }
            return res;
        }
        catch (error) {
            console.log(error);
            throw new http_exception_1.HttpException('Server Error', common_1.HttpStatus.BAD_REQUEST);
        }
    }
    async resetPassword(reqBody) {
        const res = {};
        try {
            if (utils_1.TruUtil.dataBlankForAny(reqBody['oldPassword'], reqBody['newPassword'], reqBody['confirmPassword'])) {
                res.success = false;
                res.message = 'Mandatory Fields are missing';
                return res;
            }
            if (reqBody['newPassword'] !== reqBody['confirmPassword']) {
                res.success = false;
                res.message = 'Password and confirm passwords are not the same.';
                return res;
            }
            const user = await this.prisma.user.findFirst({
                where: {
                    email: reqBody.email,
                    password: utils_1.TruUtil.getHash(utils_1.TruUtil.decode(reqBody.oldPassword)),
                },
            });
            if (user === undefined || user === null) {
                res.success = false;
                res.message = 'Old password is invalid';
                return res;
            }
            else {
                await this.prisma.user.update({
                    where: {
                        id: user === null || user === void 0 ? void 0 : user.id,
                    },
                    data: {
                        password: utils_1.TruUtil.getHash(utils_1.TruUtil.decode(reqBody['newPassword'])),
                        resetPasswordToken: null,
                        resetPasswordSentAt: null,
                    },
                });
                res.success = true;
                res.message = 'Password Reset Successfull';
            }
            return res;
        }
        catch (error) {
            console.log(error);
            throw new http_exception_1.HttpException('Server Error', common_1.HttpStatus.BAD_REQUEST);
        }
    }
};
UsersService = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [prisma_service_1.PrismaService])
], UsersService);
exports.UsersService = UsersService;
//# sourceMappingURL=users.service.js.map