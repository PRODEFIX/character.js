"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsersController = void 0;
const common_1 = require("@nestjs/common");
const users_dto_1 = require("./users.dto");
const users_service_1 = require("./users.service");
const simple_auth_guard_1 = require("./simple-auth.guard");
const swagger_1 = require("@nestjs/swagger");
let UsersController = class UsersController {
    constructor(userService) {
        this.userService = userService;
    }
    async signIn(signInDto, res) {
        const user = await this.userService.signIn(signInDto);
        if (!user.data) {
            return res.status(200).json({ message: 'Invalid Data' });
        }
        return res.status(200).json(Object.assign({}, user));
    }
    async signUp(signupDto, res) {
        // create the user first and then sign in
        const ret = await this.userService.createUser(signupDto);
        if (null == ret || null == ret.data) {
            return res.status(400).json(ret);
        }
        // once the user creates successfully signin the user
        return res.status(200).json(Object.assign(Object.assign({}, ret), { message: 'SignUp Successfull' }));
    }
    async verifyAccount(req, res) {
        const { confToken } = req.query;
        const result = await this.userService.verifyUser(confToken);
        if (!result.success) {
            if (result.message === 'Invalid Link') {
                return res.status(401).json(Object.assign({}, result));
            }
            return res.status(400).json({
                message: 'Bad Request',
            });
        }
        return res.status(200).json({
            success: true,
            message: 'Account Verified Successfully',
        });
    }
    async forgotPassword(PwdResetLinkDto, res) {
        //TODO send email link for forgot password
        const result = await this.userService.getPwdLink(PwdResetLinkDto);
        return res.status(200).json(Object.assign({}, result));
    }
    async changePassword(ChangePasswordDto, res) {
        //TODO send email link for forgot password
        const result = await this.userService.changePassword(ChangePasswordDto);
        return res.status(200).json(Object.assign({}, result));
    }
    async resetPassword(req, 
    // @Body(new ValidationPipe()) ResetPasswordDto: ResetPasswordDto,
    res) {
        const result = await this.userService.resetPassword(req.body);
        if (!result.success) {
            return res.status(400).json(Object.assign({}, result));
        }
        return res.status(200).json({
            success: true,
            message: 'password reset successfully',
        });
    }
};
__decorate([
    (0, common_1.Post)('signin'),
    __param(0, (0, common_1.Body)(new common_1.ValidationPipe())),
    __param(1, (0, common_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [users_dto_1.SignInDto, Object]),
    __metadata("design:returntype", Promise)
], UsersController.prototype, "signIn", null);
__decorate([
    (0, common_1.Post)('signup'),
    __param(0, (0, common_1.Body)(new common_1.ValidationPipe())),
    __param(1, (0, common_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [users_dto_1.SignUpDto, Object]),
    __metadata("design:returntype", Promise)
], UsersController.prototype, "signUp", null);
__decorate([
    (0, common_1.Get)('verify-account'),
    __param(0, (0, common_1.Req)()),
    __param(1, (0, common_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", Promise)
], UsersController.prototype, "verifyAccount", null);
__decorate([
    (0, common_1.Post)('forgot-password'),
    __param(0, (0, common_1.Body)(new common_1.ValidationPipe())),
    __param(1, (0, common_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [users_dto_1.PwdResetLinkDto, Object]),
    __metadata("design:returntype", Promise)
], UsersController.prototype, "forgotPassword", null);
__decorate([
    (0, common_1.Post)('change-password'),
    __param(0, (0, common_1.Body)(new common_1.ValidationPipe())),
    __param(1, (0, common_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [users_dto_1.ChangePasswordDto, Object]),
    __metadata("design:returntype", Promise)
], UsersController.prototype, "changePassword", null);
__decorate([
    (0, common_1.UseGuards)(simple_auth_guard_1.SimpleAuthGuard),
    (0, swagger_1.ApiBearerAuth)(),
    (0, common_1.Post)('reset-password'),
    __param(0, (0, common_1.Req)()),
    __param(1, (0, common_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", Promise)
], UsersController.prototype, "resetPassword", null);
UsersController = __decorate([
    (0, swagger_1.ApiTags)('User'),
    (0, common_1.Controller)('users'),
    __metadata("design:paramtypes", [users_service_1.UsersService])
], UsersController);
exports.UsersController = UsersController;
//# sourceMappingURL=users.controller.js.map