"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountController = void 0;
const common_1 = require("@nestjs/common");
const simple_auth_guard_1 = require("../users/simple-auth.guard");
const account_service_1 = require("./account.service");
const account_dto_1 = require("./account.dto");
const utils_1 = require("../common/utils");
const swagger_1 = require("@nestjs/swagger");
let AccountController = class AccountController {
    constructor(accountService) {
        this.accountService = accountService;
    }
    async createAccount(createAccountDto, res) {
        // TODO here we need to update the JWT token with the account id
        return res.status(200).json({ message: 'Successfully created account.' });
    }
    async switchAccount(req, res) {
        // TODO here we need to update the JWT token with the account id
        return res.status(200).json({ message: 'Successfully switched account.' });
    }
    async invite(invitationDto, res) {
        const teamInvite = await this.accountService.invite(invitationDto);
        return res.status(200).json(Object.assign({}, teamInvite));
    }
    async discard(discardInviteDto, res) {
        const inviteDiscard = await this.accountService.discard(discardInviteDto);
        return res.status(inviteDiscard.status).json(Object.assign({}, inviteDiscard));
    }
    async inviteInfo(req, res) {
        const viewInfo = await this.accountService.inviteInfo(req.query);
        return res.status(200).json(Object.assign({}, viewInfo));
    }
    async acceptInvite(req, res) {
        const authorization = req.headers.authorization || req.headers.Authorization;
        if (!authorization)
            throw new common_1.UnauthorizedException();
        const token = authorization.replace('Bearer ', '');
        const userDetails = utils_1.TruUtil.letifyJwt(token);
        let isLoggedIn = true;
        let viewInfo;
        if (!userDetails) {
            isLoggedIn = false;
            viewInfo = await this.accountService.acceptInvite(req.body, isLoggedIn);
        }
        else {
            viewInfo = await this.accountService.acceptInvite(req.body, isLoggedIn, userDetails);
        }
        return res.status(200).json(Object.assign({}, viewInfo));
    }
};
__decorate([
    (0, common_1.UseGuards)(simple_auth_guard_1.SimpleAuthGuard),
    (0, swagger_1.ApiBearerAuth)(),
    (0, common_1.Get)('create'),
    __param(0, (0, common_1.Body)(new common_1.ValidationPipe())),
    __param(1, (0, common_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [account_dto_1.CreateAccountDto, Object]),
    __metadata("design:returntype", Promise)
], AccountController.prototype, "createAccount", null);
__decorate([
    (0, common_1.UseGuards)(simple_auth_guard_1.SimpleAuthGuard),
    (0, swagger_1.ApiBearerAuth)(),
    (0, common_1.Get)('switch'),
    __param(0, (0, common_1.Req)()),
    __param(1, (0, common_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", Promise)
], AccountController.prototype, "switchAccount", null);
__decorate([
    (0, common_1.UseGuards)(simple_auth_guard_1.SimpleAuthGuard),
    (0, swagger_1.ApiBearerAuth)(),
    (0, common_1.Post)('team/invite'),
    __param(0, (0, common_1.Body)(new common_1.ValidationPipe())),
    __param(1, (0, common_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [account_dto_1.InvitationDto, Object]),
    __metadata("design:returntype", Promise)
], AccountController.prototype, "invite", null);
__decorate([
    (0, common_1.UseGuards)(simple_auth_guard_1.SimpleAuthGuard),
    (0, swagger_1.ApiBearerAuth)(),
    (0, common_1.Post)('team/discard'),
    __param(0, (0, common_1.Body)(new common_1.ValidationPipe())),
    __param(1, (0, common_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [account_dto_1.DiscardInviteDto, Object]),
    __metadata("design:returntype", Promise)
], AccountController.prototype, "discard", null);
__decorate([
    (0, common_1.UseGuards)(simple_auth_guard_1.SimpleAuthGuard),
    (0, swagger_1.ApiBearerAuth)(),
    (0, common_1.Get)('team/invite-info'),
    __param(0, (0, common_1.Req)()),
    __param(1, (0, common_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", Promise)
], AccountController.prototype, "inviteInfo", null);
__decorate([
    (0, common_1.Post)('team/accept-invite'),
    __param(0, (0, common_1.Req)()),
    __param(1, (0, common_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", Promise)
], AccountController.prototype, "acceptInvite", null);
AccountController = __decorate([
    (0, swagger_1.ApiTags)('Account'),
    (0, common_1.Controller)('account'),
    __metadata("design:paramtypes", [account_service_1.AccountService])
], AccountController);
exports.AccountController = AccountController;
//# sourceMappingURL=account.controller.js.map